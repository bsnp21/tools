<html>

<head>
    <title>KingsList</title>
    <base target="_blank" />
    <META http-equiv="Content-Type" content="text/html;" charset="UTF-8">
    <META name="viewport" content="width=device-witdh, initial-scale=1, maximum-scale=1, user-scale=0">



    <script src="https://wdingbox.github.io/ham12/jq/jquery-2_1_3.min.js"></script>
    <script src="https://wdingbox.github.io/assetjs/libs/jq/Rapid_Sort_Table.js"></script>


    <script src="https://bsnp21.github.io/bb/np/js/BsnpRestApi.js"></script>



    <script src="./KingsList.json.js"></script>

</head>

<style>
    body {
        background-color: white;
        margin-bottom: 100px;
    }


    .addhili {
        background-color: yellow;
    }

    .clihi {
        background-color: gray;
    }

    .hili_row {
        border: 2px solid red;
        background-color: yellow;
    }

    td[Nationality='S'] {
        xcolor: deepskyblue;
        border: 3px solid deepskyblue;
    }

    td[Nationality='N'] {
        xcolor: lightblue;
        border: 3px solid lightblue;
    }

    tbody tr:nth-child(odd) {
        background-color: rgb(244, 244, 244);
        zzborder: 1px solid red;
    }
</style>

<script>
    function UpdateSelected() {
        //var txt = updateData("#KingTab tbody tr");
        var updateObj = update_a_row(".selected_row")
        var updateNotes = ""
        for ([key, obj] of Object.entries(updateObj)) {
            if (!key) return alert("please select a raw.")
            updateNotes = obj.Notes
            if (!obj.Notes && !confirm("It's better to fill a name or sth in 'Notes'. \nContinue anyway?")){
                return
            }
        }

        var par = {
            shell_cmd_ary: [
                "sudo chmod 777 -R /var/www/html/wdaws/tools/BibleStudy",
                "cd /var/www/html/wdaws/tools/BibleStudy",
                "pwd",
                "sudo ls -lR"],
            shell_cmd_ary_before_update: [
                "cd /var/www/html/wdaws/tools/BibleStudy",
                "sudo git status",
                "sudo git diff",
                "sudo git pull",
                "sudo ls -lR"],
            shell_update_jspathfilename: "/var/www/html/wdaws/tools/BibleStudy/KingsList.json.js",
            shell_update_newobj: updateObj,
            shell_cmd_ary_post_update: [
                "cd /var/www/html/wdaws/tools/BibleStudy",
                "sudo git diff",
                "sudo git status",
                "sudo git add *",
                `sudo git commit -m 'updated notes: ${updateNotes}'`,
                "sudo git push"
            ],
        }
        var sApiNameID = 'ApiUsr_Cmdline_Exec'
        var api = new BsnpRestApi()
        var _this = this
        $(_this).next().text('')
        api[sApiNameID](
            par,
            function (ret) {
                console.log("ret", ret.out.data)
                var str = JSON.stringify(ret, null, 4);
                $("#txa").val(str)
            })

    }

    function loadData() {
        const objKeys = [
            "Names(CUV)",
            "DN",
            "Span",
            "Date",
            "Verses",
            "RelatedKing",
            "Prophet",
            "Priest",
            "Kinship",
            "Notes"
        ]

        var str = "", sths = "<th>#</th><th>Name(NIV)</th>", idx = 0;
        objKeys.forEach((key, i) => {
            sths += `<th title='${key}'>${key}</th>`
        })
        for ([kingname, obj] of Object.entries(KingsList)) {
            str += `<tr><td>${idx++}</td><td Nationality='${obj.DN[0]}'>${kingname}</td>`
            objKeys.forEach((key, i) => {
                str += `<td title='${key}'>${obj[key]}</td>`
            })
            str += "</tr>"
        }
        $("#tabcontainer").html(tabtmp(sths, str));
        ////post create
        $("table").on("keyup", function () {
            //updateData(".addhili")
            console.log("table kkkkk");

        })
        $("tr").bind("click", function () {
            $(".selected_row").removeClass("selected_row")
            $(this).addClass("selected_row")
        })

        $("tr").each(function () {
            bind_td_evt_of_a_row(this)
        })

        $("body").on("select", function () {//not working
            $(".clihi").removeClass("clihi")
            var txt = window.Selection()
            $("td").each(function () {
                if ($(this).text().indexOf(txt) >= 0) {
                    $(this).addClass("clihi")
                }
            })
        })
        var srtabl = new Rapid_Sort_Table("#tabcontainer table")
    }
    function bind_td_evt_of_a_row(eRow) {
        $(eRow).find("td").each(function () {
            $(this).on("click keypress", function () {
                console.log("td keyup")
                update_a_row($(this).parent())
                $(".hili_row").removeClass("hili_row")
                $(this).parent().find("td").addClass("hili_row")
                $(".clihi").removeClass("clihi")
                var txt = $(this).text().trim()
                $("td").each(function () {
                    if ($(this).text() === txt && txt.length > 0) {
                        $(this).addClass("clihi")
                    }
                })
            })
        })
    }
    function updateData(eRows) {
        var dat = {}
        $(eRows).each(function (irow) {
            var pkey = $(this).find("td:eq(1)").text().trim();
            var obj = {}
            $(this).find("td").each(function (icol) {
                if (icol <= 1) return;
                var key = $(this).attr("title");
                var val = $(this).text();
                obj[key] = val
            })
            dat[pkey] = obj;
        })
        var str = JSON.stringify(dat, null, 4);
        $("#txa").val(`var KingsList = \n${str}`)
        var cstr = JSON.stringify(dat);
        return cstr;
    }
    function update_a_row(eRow) {
        var dat = {}
        var pkey = $(eRow).find("td:eq(1)").text().trim();
        var obj = {}
        $(eRow).find("td").each(function (icol) {
            if (icol <= 1) return;
            var key = $(this).attr("title");
            var val = $(this).text();
            obj[key] = val
        })
        dat[pkey] = obj;

        var str = JSON.stringify(dat, null, 4);
        $("#txa").val(`var KingsList = \n${str}`)
        var cstr = JSON.stringify(dat);
        return dat;
    }


    function updateCSV(eRows) {
        var csv = ""
        $(eRows).each(function (irow) {
            var line = ""
            $(this).find("td").each(function (icol) {
                //if (icol === 0) return;
                var key = $(this).attr("title");
                var val = $(this).text();
                line += `"${val}",`
            })
            csv += `${line},""\r\n`

            $("#txa").val(csv)
        })
    }
    $(function () {
        loadData();




        $("#Load").on("click", function () {
            loadData()
        })
        $("#Add").on("click", function () {
            var etr = $("#KingTab tbody tr:eq(0)").clone();

            $(etr).find("td").text(""); $(etr).find("td:eq(0)").text("0");
            etr = $(etr).html()
            var ret = $("#KingTab tbody").append(`<tr class='addhili'>${etr}</tr>`);
            $(".addhili").css("background-color", "")
            bind_td_evt_of_a_row(ret)

        })

        $("#Save_json").on("click", function () {
            updateData("#KingTab tbody tr");
        })
        $("#Save_csv").on("click", function () {
            updateCSV("#KingTab tbody tr");
        })
        $("#Upload").on("click", function () {
            UpdateSelected()
        })


    })




</script>

<body>
    <button id="Load">Load</button>

    <div id="tabcontainer">
        <script> function tabtmp(sths, trs) {
                return `
            <table id="KingTab" border="1"><caption>Israel Kings List</caption>
            <thead>
                <tr>${sths}</tr>
            </thead>
            <tbody contenteditable>${trs}</tbody>
            </table>
            `}
        </script>

    </div>
    <p><b>Note:</b> DN represents Dynasty Number with good (+) or bad (-). E.g. S08+ means the 8th King of South Israel (Judah) is relatively good.  </p>


    <button id="Add">Add</button> <button id="Save_json">JSON</button><button id="Save_csv">CSV</button><button
        id="Upload">UpdateSelected</button><br>
    <textarea id="txa" cols="120" rows="30"></textarea>
</body>

</html>
<script>


</script>